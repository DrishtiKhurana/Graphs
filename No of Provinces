class Solution {
    public int findCircleNum(int[][] isConnected) {
        
        int V = isConnected.length; 
        // To create an adjacency list 'l' 
        ArrayList<ArrayList<Integer>> l = new ArrayList<>();

        // Creating adjacency list from the adjacency matrix
        for (int i = 0; i < V; i++) {
            l.add(new ArrayList<>());
            for (int j = 0; j < V; j++) {
                if (i != j && isConnected[i][j] == 1) {
                    // Adding connected nodes to the adjacency list
                    l.get(i).add(j);
                }
            }
        }

        int vis[] = new int[V]; 
        int cnt = 0; 
        for(int i = 0;i<V;i++) {
            if(vis[i] == 0) {
               cnt++;
               dfs(i, l, vis); 
            }
        }
        return cnt; 
       
    }

    private  void dfs(int node, 
       ArrayList<ArrayList<Integer>> adjLs , 
       int vis[]) {
        vis[node] = 1; 
        for(Integer it: adjLs.get(node)) {
            if(vis[it] == 0) {
                dfs(it, adjLs, vis); 
            }
        }
    }
}
