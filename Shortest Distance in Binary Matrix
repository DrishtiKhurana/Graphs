//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            int[] source = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                source[i] = x;
            }
            int[] dest = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                dest[i] = x;
            }
            Solution ob = new Solution();
            int ans = ob.shortestPath(grid, source, dest);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    int shortestPath(int[][] grid, int[] source, int[] destination) {

if(source[0] == destination[0] && 
           source[1] == destination[1]) return 0; 

       PriorityQueue<Triple> pq=new PriorityQueue<>((a,b)->a.distance-b.distance); //make priorityqueue as min heap for dist
      
      int[][]dist=new int[grid.length][grid[0].length];
      
      for(int[]row:dist){
          Arrays.fill(row,Integer.MAX_VALUE);
      }
      
      pq.add(new Triple(0,source[0],source[1]));
      dist[source[0]][source[1]]=0;
      int[]di={-1,0,1,0};
          int[]dj={0,1,0,-1};
          
      while(!pq.isEmpty()){
          
          int tripledist=pq.peek().distance;
          int row=pq.peek().row;
          int col=pq.peek().col;
          pq.remove();
          
          for(int i=0;i<4;i++){
              
             int newi= row+di[i];
             int newj=col+dj[i];
             
             if(newi>=0 && newi<grid.length && newj>=0 && newj<grid[0].length &&  grid[newi][newj]==1  && tripledist+1 <dist[newi][newj]){
                 dist[newi][newj]=1+tripledist;
                 
                 if(newi == destination[0] && 
                       newj == destination[1]) return tripledist + 1; 
                 
                 pq.add(new Triple(1+tripledist,newi,newj));
                 
             }
              
          }
          
         
          
          
      }
        return -1;
        
    }
    
    class Triple{
        
        int distance;
        int row;
        int col;
        
        Triple(int distance,int row,int col){
            this.distance=distance;
            this.row=row;
            this.col=col;
        }
    }
}
